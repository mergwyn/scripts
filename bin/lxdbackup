#!/usr/bin/env bash

# lxdbackup
#
# Backup up all remote lxd instances using lxc copy
# First backup is using a snapshot then using --refresh
#
# Usage: lxdbackup

# shellcheck source=/dev/null
for function in "$(dirname "$0")"/../functions/*.sh; do source "${function}"; done

set -o nounset
set -o errexit
set -o pipefail

# global variables
_snapshot=lxdbackup
_lxc=$(command -v lxc)
dryrun(){
  _lxc="echo DRYRUN:${_lxc}"
}

# Cleanup when exiting unclean
trap "cleanup; echo 'Unclean exit'" INT SIGHUP SIGINT SIGTERM

# functions
cleanup () {
  : ;
}

usage() {
  cat <<EOF >&2
$0: <flags> 
Allowed flags are:
-l|--log=<CRITICAL|ERROR|WARN|NOTIFY|INFO|DEBUG> default WARN
-n|--dry-run                                    print commands as if they would be executed
--help                                          this message
EOF
}

params="$(getopt -o l:n --long dry-run,log:,help --name "$0" -- "$@")"
eval set -- "$params"

while true ; do
  case "$1" in
    -l|--log)     enumLogLevel "$2"; export LOGLEVEL="$2"; shift 2;;
    -n|--dry-run) dryrun; shift;;
    --help)       usage; exit 0;;
    --)           shift; break ;;
    *)            log_critical "Not implemented: $1"; usage; exit 1;;
  esac
done

if [[ $# != 0 ]] ; then
  log_critical "Command line arguments found: $*"
  usage
  exit 1
fi

# delete snapshot if it exists
delete_snapshot() {
  local container="$1"
  local snapname="$2"
  local snap="${container}/${snapname}"

  log_debug "delete_snapshot ${container} ${snapname}"

  # delete snapshot if it exists
  if lxc info "${container}" | grep -q "^  ${snapname} "; then
    log_info "Attempting to delete snapshot '${snap}'"
    if ! ${_lxc} delete "${snap}" ; then
      log_error "FAILED to delete snapshot ${snap}"
      return 1
    fi
    log_info "Successfully deleted snapshot ${snap}"
  fi
  return 0
}

create_snapshot() {
  local container="$1"
  local snapname="$2"
  local snap="${container}/${snapname}"

  log_debug "create_snapshot ${container} ${snapname}"

  delete_snapshot "${container}" "${snapname}" || return 1

  log_info "Attempting to create snapshot '${snap}'"
  if ! ${_lxc} snapshot "${snap}" ; then
    log_error "FAILED to create snapshot ${snap}"
    return 2
  fi
  log_info "Successfully created snapshot ${snap}"

  return 0
}

copy_container() {
  local source="$1"
  local container="$2"
  local pool="$3"
  local refresh="$4"
  local copy_args="--stateless --config=boot.autostart=false --storage ${pool} ${refresh}"

  log_notice "Attempting to copy '${source}'"
  log_debug "${_lxc} copy ${source} ${container} ${copy_args}"

  # shellcheck disable=SC2086
  if ! ${_lxc} copy "${source}" "${container}" ${copy_args}; then
    log_error "FAILED to copy ${source}, ABORTING BACKUP"
    return 1
  fi  
  log_debug "Success -- copied ${source}"
  return 0
}

remote_list() {
  lxc remote list | grep -v simplestreams | awk '/lxd/{print $2}' | grep -v local ;
}
container_list() {
  lxc list -c ns "${remote}:" | awk '!/NAME/{ if ( $4 == "RUNNING" ) print $2}';
}

declare -i _remote_count
declare -i _backedup_count
declare -i _container_count
declare -a _remotes

_pool=$(lxc storage list --format=csv | cut -d ',' -f 1 | head -1)
if [[ -z ${_pool} ]] ; then
  log_critical "FAILED to get storage pool for ${remote}"
  exit 1
fi

mapfile -t _remotes < <(remote_list)
log_debug "List of remotes to backup: ${_remotes[*]}"

for remote in "${_remotes[@]}"; do
  log_notice "Backing up remote ${remote}"

  declare -a _containers
  _remote_count=0

  mapfile -t _containers < <(container_list)
  log_debug "List of containers to backup: ${_containers[*]}"
  _container_count+=${#_containers[@]}

  for container in "${_containers[@]}"; do
    log_notice "Backing up container ${container}"

# Check if container exists on local.
# If it does then make an initial copy of the container from a snapshot
# This is because making a copy of a running container using criu doesn't work for some reason
    if [[ -z $(lxc list "^${container}\$" -c n --format=csv) ]] ; then
      log_debug "${container} doesn't exist on local:, create snapshot"
      create_snapshot "${remote}:${container}" ${_snapshot} || continue

      copy_container "${remote}:${container}/${_snapshot}" "${container}" "${_pool}" "" || continue

      delete_snapshot "${remote}:${container}" "${_snapshot}" || continue
    fi
  
    copy_container "${remote}:${container}" "${container}" "${_pool}" --refresh || continue

    _remote_count+=1
    log_debug "--------------------------------------------"
  done

  log_notice "Backup of ${remote} complete, $_remote_count containers backed up"
  _backedup_count+=${_remote_count}

done
log_notice "lxdbackup complete, $_backedup_count containers backed up out of $_container_count"

exit $(( _container_count - _backedup_count ))
