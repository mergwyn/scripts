#!/usr/bin/env bash

# lxdbackup
#
# Backup up all remote lxd instances using lxc copy
# First backup is using a snapshot then using --refresh
#
# Usage: lxdbackup

# shellcheck source=/dev/null
for function in "$(dirname "$0")"/../functions/*.sh; do source "${function}"; done

set -o nounset
set -o errexit

# globals variables
_snapshot=lxdbackup

# Use these for debugging destructive commands
_lxc='echo lxc'
_lxc=$(command -v lxc)

# Cleanup when exiting unclean
trap "cleanup; echo 'Unclean exit'" INT SIGHUP SIGINT SIGTERM

# functions
cleanup () {
  : ;
}

# delete snapshot if it exists
# Usage: delete_backup <fully qualified snapshot>
# returns: 0 or 1
delete_snapshot() {
  local snap="$1"
  local container=${snap%%/*}
  local snapname=${snap##*/}

  if [[ -z ${snapname} ]] ; then
    log_error "FAILED to get snapname from $snap"
    return 2
  fi

  if [[ -z ${container} ]] ; then
    log_error "FAILED to get container from $snap"
    return 2
  fi

  log_debug "delete_snapshot ${snap} for ${container} with name ${snapname}"

  # delete snapshot if it exists
  if lxc info "${container}" | grep -q "^  ${snapname} "; then
    log_info "Attempting to delete snapshot '${snap}'"
    if ! lxc delete "${snap}" ; then
      log_error "FAILED to delete snapshot ${snap}"
      return 1
    fi
    log_info "Successfully deleted snapshot ${snap}"
  fi
  return 0
}

create_snapshot() {
  local snap="$1"

  log_debug "create_snapshot ${snap}"

  log_info "Attempting to create snapshot '${snap}'"
  if ! lxc snapshot "${snap}" ; then
    log_error "FAILED to create snapshot ${snap}"
    return 1
  fi
  log_info "Successfully created snapshot ${snap}"

  return 0
}

remote_list() {
  lxc remote list | grep -v simplestreams | awk '/lxd/{print $2}' | grep -v local ;
}
container_list() {
  lxc list -c ns "${remote}:" | awk '!/NAME/{ if ( $4 == "RUNNING" ) print $2}';
}

declare -i _count
declare -i _total_count
declare -a _remotes

# shellcheck disable=SC2207
_remotes=( $(remote_list) )
log_debug "List of remotes to backup: ${_remotes[*]}"

for remote in "${_remotes[@]}"; do
  log_notice "Backing up remote ${remote}"

  declare -a _containers
  _count=0
  # shellcheck disable=SC2207
  _containers=( $(container_list) )
  log_debug "List of containers to backup: ${_containers[*]}"

  for container in "${_containers[@]}"; do
    log_notice "Backing up container ${container}"

    # Check if container exists on local:.
    if [[ -n $(lxc list "^${container}\$" -c n --format=csv) ]] ; then
      source="${remote}:${container}"
      refresh=--refresh
    else
      log_debug "${container} doesn't exist on local:, create snapshot"
      source="${remote}:${container}/${_snapshot}"
      delete_snapshot "${source}" || continue
      create_snapshot "${source}" || continue
  
      refresh=
    fi

    # TODO work out which target pool to use?
    # eg always use 1st one?
    # lxc storage list --format=csv | cut -d ',' -f 1 | head -1
    log_notice "Attempting to copy '${source}'"
    copy_args="--stateless --config=boot.autostart=false --storage default"
    log_debug "${_lxc} copy ${source} ${container} ${refresh} ${copy_args}"
    if ${_lxc} copy "${source}" "${container}" ${refresh} ${copy_args}; then
      log_debug "Success -- copied ${source}"
    else
      log_error "FAILED to copy ${source}, ABORTING BACKUP"
      continue
    fi  

    if [[ -z "${refresh}" ]] ; then
      delete_snapshot "${source}" || continue
    fi

    _count+=1
    log_debug "--------------------------------------------"
  done
  log_notice "Backup of ${remote} complete, $_count containers backed up"
  _total_count+=${_count}
done
log_notice "lxdbackup complete, $_total_count containers backed up"
