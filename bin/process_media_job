#!/bin/bash

export LOGLEVEL=${LOGLEVEL:-NOTICE}

for function in $(dirname "$0")/../functions/*.sh; do . "${function}"; done
#log_info { echo $* ;}
#log_notice { echo $* ;}

set -o nounset
#set -o errexit

# default values
HumaxHost=humax
VideoDir="My Video"
HumaxDir="/nfs/${HumaxHost}/${VideoDir}"
TVDir=/nfs/${HumaxHost}/.TV
HumaxBin="${HumaxDir}"/'[Deleted Items]'
IgnoreFile=.plexignore
check=
dryrun=
declare -i ExitCode=0

TmpFile=$(mktemp --suffix .process_media)
finish() { [[ -f "${TmpFile}" ]] && rm -f "${TmpFile}" ; }
trap finish EXIT

Usage()
{
  cat <<EOF >&2
$0: <flags> [directories to process]
Allowed flags are:
-l|--log=<CRITIAL|ERROR|WARN|NOTIFY|INFO|DEBUG> default WARN
-s|--dry-run					print commands as if they would be executed
--help     					this message
EOF
}

params="$(getopt -o l:s --long dry-run,help,log: --name "$0" -- "$@")"
eval set -- "$params"

while true
do
  case "$1" in
    -l|--log)       check=$(enumLogLevel "$2"); LOGLEVEL="$2"; shift 2;;
    -s|--dry-run)   dryrun=dryrun; shift;;
    --help)         Usage; exit 0;;
    --)             shift; break ;;
    *)              log_critical "Not implemented: $1" ; Usage; exit 1;;
  esac
done

rm="/bin/rm"
ln="/bin/ln"
mv="/bin/mv"
mkdir="/bin/mkdir"
touch="/usr/bin/touch"
if [[ "${dryrun}" ]]
then
  rm="echo ${rm}"
  ln="echo ${ln}"
  mv="echo ${mv}"
  mkdir="echo ${mkdir}"
  touch="echo ${touch}"
fi

isalive() { ping -c 1 "$1" > /dev/null 2>&1; }
ismounted() { test -d "${1}" ; }

RebuildIgnoreFile()
{
(
  cd "${HumaxDir}" || exit

  cat > "${TmpFile}" <<!
# Ignore directories called 
*Deleted Items*/*
*ModSettings*/*
0 Films/*
.TV/*
!

  if [[ -d ${TVDir} ]] 
  then
# Tidy up old symbolic links
    ${rm} -f "${TVDir}"/*
    find "${HumaxDir}"/* -type l -exec ${rm} {} \;
# Now get all series for which we have a tdvb and
# link to .TV directory
# and add to ignore file so it doesnt get processed twice
    while IFS= read -r -d '' TVShow
    do
      ShowName=$(dirname "${TVShow}")
      log_info "Found TV Show: ${TVShow}"
      ${ln} -s "../${VideoDir}/${ShowName}" "${TVDir}/${ShowName}"
      echo "${ShowName}"'/*' >> "${TmpFile}"
    done< <(find -- * -name '\[Deleted Items\]' -prune -o -name .tvdbseriesid -print0)

    if [[ $(diff "${TmpFile}" "${IgnoreFile}") ]]
    then
      log_info "Overwriting ${IgnoreFile}"
      ${mv} "${TmpFile}" "${IgnoreFile}"
    else
      ${rm} "${TmpFile}"
    fi
  fi
)
}

RemoveOrphans()
{
  local file; local suffix; local base; local subdir; local dir; local target

  while IFS= read -r -d '' file
  do
    suffix=."${file##*.}"
    base="${file%%${suffix}}"
   
    if [[ ! -f "${base}.ts" ]]
    then
      dir=$(dirname "${file}")
      subdir="${dir#${HumaxDir}}"
      target="${HumaxBin}${subdir}"
      log_notice "Found orphan file: ${base}, moving to ${target}"
      ${mkdir} -p "${target}"
      ${mv} "${base}".{hmt,ts,thm,nts} "${target}"
      ${touch} "${target}/${base}".{hmt,ts,thm,nts}
    fi
  done< <(find "${HumaxDir}" -name '\[Deleted Items\]' -prune -o -name '*.nts' -print0)
}


PROG=$(dirname "$0")/process_media

ismounted "${TVDir}" && RebuildIgnoreFile
ismounted "${TVDir}" && RemoveOrphans

ismounted "${TVDir}" && "${PROG}" "$@" --output="/srv/media/humax/TV" --humax --tvdb "${TVDir}"   	|| ExitCode+=$?
ismounted "${TVDir}" && "${PROG}" "$@" --output="/srv/media/humax/Other" --humax "${HumaxDir}"		|| ExitCode+=$?
ismounted "${TVDir}" && "${PROG}" "$@" --output="/srv/media/humax/Films" --humax "${HumaxDir}/0 Films"	|| ExitCode+=$?
"${PROG}" "$@" "/srv/media/TV Shows"	|| ExitCode+=$?
"${PROG}" "$@" "/srv/media/Movies"		|| ExitCode+=$?
#${PROG} ${ARGS} "/srv/media/Recorded/Films"	|| ExitCode+=$?
#${PROG} ${ARGS} "/srv/media/Recorded/TV"	|| ExitCode+=$?
#${PROG} ${ARGS} "/srv/media/Recorded/Videos"	|| ExitCode+=$?

exit $ExitCode
# vim: sw=2 nu ai
